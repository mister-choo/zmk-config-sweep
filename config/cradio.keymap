// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <120>;
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <120>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <125>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q          &kp W            &lt 1 E          &kp R         &kp T                &kp Y        &kp U         &lt 2 I           &kp O         &kp P
&hrm LSHIFT A  &hrm LEFT_WIN S  &hrm LEFT_ALT D  &hrm LCTRL F  &kp G                &kp H        &hrm RCTRL J  &hrm RIGHT_ALT K  &hrm RMETA L  &hrm RSHIFT SEMICOLON
&kp Z          &kp X            &kp C            &kp V         &kp B                &kp N        &kp M         &kp COMMA         &kp DOT       &kp FSLH
                                                 &lt 1 ESCAPE  &hrm LSHIFT SPACE    &lt 3 ENTER  &lt 2 BSPC
            >;
        };

        red_layer {
            bindings = <
&kp PRINTSCREEN  &kp TAB       &kp UP_ARROW  &kp LS(TAB)    &trans       &trans    &kp N7        &kp N8        &kp N9        &kp LA(F4)
&kp LA(LSHIFT)   &kp LEFT      &kp DOWN      &kp RIGHT      &trans       &trans    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp NUMBER_0
&caps_word       &kp LC(LEFT)  &trans        &kp LC(RIGHT)  &trans       &trans    &kp N1        &kp NUMBER_2  &kp NUMBER_3  &trans
                                             &kp LA(TAB)    &kp SPACE    &kt HOME  &kp END
            >;
        };

        blue_layer {
            bindings = <
&trans             &kp LESS_THAN         &kp EQUAL  &kp GREATER_THAN       &trans      &trans       &kp LEFT_BRACKET  &kp UNDERSCORE  &kp RBKT         &trans
&kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp MINUS  &kp RIGHT_PARENTHESIS  &kp PLUS    &trans       &kp LEFT_BRACE    &kp COLON       &kp RIGHT_BRACE  &kp SQT
&trans             &trans                &trans     &trans                 &trans      &trans       &trans            &trans          &trans           &trans
                                                    &trans                 &trans      &kp LC(TAB)  &kp LS(LC(TAB))
            >;
        };

        special {
            bindings = <
&trans        &trans      &trans         &trans        &trans           &trans         &trans        &lt 4 I       &lt 5 O   &trans
&kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp FSLH  &kp BSLH
&trans        &trans      &kp LS(TILDE)  &trans        &trans           &trans         &trans        &kp GRAVE     &trans    &trans
                                         &trans        &trans           &trans         &trans
            >;
        };

        fkeys_layer {
            bindings = <
&trans  &kp F1  &kp F2   &kp F3   &kp F4     &trans  &trans  &trans  &trans  &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8     &trans  &trans  &trans  &trans  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12    &trans  &trans  &trans  &trans  &trans
                         &trans   &trans     &trans  &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };
    };
};
